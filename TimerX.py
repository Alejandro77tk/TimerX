
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import tkinter.font as tkfont

import tkinter as tk

from PIL import Image, ImageTk

from playsound import playsound

import threading

import os

import winsound

import pygame

import time


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
# Inicializa el mixer de pygame
pygame.mixer.init()

# Carga el sonido
# Cargar los sonidos
click_sonido = pygame.mixer.Sound(relative_to_assets("click.mp3"))
tick_sonido = pygame.mixer.Sound(relative_to_assets("tick_2.wav"))
alarma_sonido = pygame.mixer.Sound(relative_to_assets("alarma_tiempo.mp3"))
pygame.mixer.music.set_volume(1.0)  # Volumen al máximo inicialmente

sonido_activado = True

# Funciones para reproducir
def reproducir_click():
    if sonido_activado:
        click_sonido.play()

def reproducir_tick():
    if sonido_activado:
        tick_sonido.play()

# Funciones para silenciar
def silenciar_todo():
    global sonido_activado
    sonido_activado = False
    pygame.mixer.stop()

def activar_todo():
    global sonido_activado
    sonido_activado = True
    pygame.mixer.init()






window = Tk()

window.geometry("1920x1080")
window.configure(bg = "#EAF6FF")
window.iconbitmap(relative_to_assets("x_1_.ico"))
window.title("TimerX")
# Fondo de la ventana
canvas = Canvas(
    window,
    bg = "#EAF6FF",
    height = 1920,#750
    width = 1080,#1000
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
# Posicion de las dos imagenes que hacen como frame, para tener dentro el cronometro y los botones
canvas.place(x = 460, y = 0)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_4 = canvas.create_image(
    500.0,
    720.0,
    image=image_image_4
)
# Marco grande
image_image_3 = PhotoImage(
    file=relative_to_assets("image21.png"))
image_3 = canvas.create_image(
    500.0,
    440.0,
    image=image_image_3
)
# Marco grande rojo cuando se acaba el tiempo
image_image_1 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_1 = canvas.create_image(
    500.0,
    440.0,
    image=image_image_1
)

canvas.itemconfigure(image_1, state="hidden")
#canvas.itemconfigure(image_1, state="")


# Crono rojo cuando se termina el tiempo
crono_acabado = tk.Label(
    #199.0,
    #180.0,
    #anchor="nw",
    text="00:00",
    activebackground="#A94042",
    bg="#A94042",
    font=("Lucida Consolas",235 * -1),
    fg="white",
    state="disabled",

)

crono_acabado.pack_forget()
#crono_acabado.place(x=600, y=260)#, anchor="nw"

# CRONOMETRO VISUAL
crono = tk.Label(
    #199.0,
    #180.0,
    #anchor="nw",
    text="00:00",
    activebackground="#4A7C99",
    bg="#4A7C99",
    font=("Lucida Console",265 * -1),
    fg="white",

)
crono.place(x=557, y=312)#, anchor="nw"

mi_nombre = tk.Label(
    #199.0,
    #180.0,
    #anchor="nw",
    text="By Alejandro Modino Sainz",
    activebackground="#EAF6FF",
    bg="#EAF6FF",
    font=("Lucida Console",15 * -1),
    fg="#003D6C",

)

mi_nombre.place(x=850, y=990)#, anchor="nw"


def poner_crono_a_punto():
    crono_acabado.pack_forget()
    crono.pack()
    crono.place(x=600, y=260)
    canvas.itemconfigure(image_3, state="normal")

tiempo_restante = 0  # en segundos

# Actualizar el cronometro cada vez que cambie de segundos o minutos
def actualizar_crono():
    minutos = tiempo_restante // 60
    segundos = tiempo_restante % 60
    reproducir_tick()
    crono.config(text=f"{minutos:02}:{segundos:02}")


# Añadir 5 minutos al cronometro
def añadir_5():
    global tiempo_restante
    if tiempo_restante < 5400:
        tiempo_restante += 5 * 60  # 5 minutos en segundos
    else:
        pass
    actualizar_crono()
# Añadir 10 minutos al cronometro
def añadir_10():
    global tiempo_restante
    if tiempo_restante < 5100:
        tiempo_restante += 10 * 60

    elif tiempo_restante == 5100:
        tiempo_restante += 5 * 60
    else:
        tiempo_restante == 5400  # 5 minutos en segundos
    actualizar_crono()
# Restar 10 minutos al cronometro
def restar_10():
    global tiempo_restante
    if tiempo_restante <= 600:
        tiempo_restante = 0
    else:
        tiempo_restante -= 10 * 60  # 5 minutos en segundos
    actualizar_crono()

# Restar 5 minutos al cronometro
def restar_5():
    global tiempo_restante
    if tiempo_restante <= 300:
        tiempo_restante = 0
    else:
        tiempo_restante -= 5 * 60  # 5 minutos en segundos
    actualizar_crono()

cuenta_atras_activa = False


# Define la funcion de hacer la cuenta atrás es decir bajar el tiempo segundo a segundo
def cuenta_atras():

    global tiempo_restante, cuenta_atras_activa

    if tiempo_restante > 0 and cuenta_atras_activa:
        tiempo_restante -= 1
        actualizar_crono()
        crono.after(1000, cuenta_atras)
        # Poner el cronometro a rojo cuando llegue a 0 y activar la musica
        if tiempo_restante == 0:
            alarma_sonido.play()
            canvas.itemconfigure(image_1, state="normal")
            crono.place_forget()
            crono_acabado.pack()
            crono_acabado.place(x=650, y=310)
                
        else:
            pass

    else:
        cuenta_atras_activa = False 

# Empezar la cuenta atrás para que el cronometro empiece a bajar segundo a segundo o reanude de donde se ha quedado
def iniciar_cuenta_atras():
    global cuenta_atras_activa
    if not cuenta_atras_activa and tiempo_restante > 0:
        cuenta_atras_activa = True
        cuenta_atras()
        if tiempo_restante == 0:
            pass
# Botón rojo que resetea el tiempo a 0
def cortar_tiempo():
    # Poner el crono y el color del marco donde está de color azul, esconder el de color rojo y parar la musica 
    canvas.itemconfigure(image_1, state="hidden")
    canvas.itemconfigure(image_3, state="normal")
    crono_acabado.pack_forget()
    crono.place(x=557, y=308)
    alarma_sonido.stop()

    # Aqui actualiza el crono
    global tiempo_restante
    tiempo_restante = 0
    actualizar_crono()


# Botón que para el tiempo 
def parar_tiempo():
    poner_crono_a_punto()
    global cuenta_atras_activa
    cuenta_atras_activa = False





# BOTÓN MENÚ
"""
img0 = Image.open(relative_to_assets("button_1.png")).convert("RGBA")
photo0 = ImageTk.PhotoImage(img0)


imagen_id = canvas.create_image(560.0, 548.0, image=photo0, anchor="nw")

def accion_menu(event):
    parar_tiempo()

canvas.tag_bind(imagen_id, "<Button-1>", accion_menu)

"""
# ACTIVAR Y DESACTIVAR SONIDO, POR DEFECTO EL SONIDO ESTÁ ACTIVADO, SE USA GLOBAL PARA HACER REFERENCIA A LA VARIABLE MENCIONANDA ANTERIORMENTE DE 'sonido_activado'.  LUEGO DEPENDIENDO SI EL SONIDO ESTÁ ACTIVADO O NO SE CAMBIA LA APARIENCIA DE LOS BOTONES

sonido_activado = True

def cambiar_estado_sonido(event=None):
    global sonido_activado

    sonido_activado = not sonido_activado

    if sonido_activado:
        canvas.itemconfigure(imagen_id_SONIDO, state='normal')
        canvas.itemconfigure(imagen_id_NO_SONIDO, state='hidden')
        activar_todo() #LINEA -> 55
    else:
        canvas.itemconfigure(imagen_id_SONIDO, state='hidden')
        canvas.itemconfigure(imagen_id_NO_SONIDO, state='normal')

        silenciar_todo()  #LINEA -> 50 # O activar_sonido(), según el estado

# Imágenes del botón de sonido
imgSONIDO = Image.open(relative_to_assets("button_2_SONIDO.png")).convert("RGBA")
photoSONIDO = ImageTk.PhotoImage(imgSONIDO)

img_NO_SONIDO = Image.open(relative_to_assets("button_1_NO_SONIDO.png")).convert("RGBA")
photo_NO_SONIDO = ImageTk.PhotoImage(img_NO_SONIDO)

# Crear imágenes del botón de sonido en el canvas
imagen_id_SONIDO = canvas.create_image(560.0, 50, image=photoSONIDO, anchor="ne")
imagen_id_NO_SONIDO = canvas.create_image(560.0, 50, image=photo_NO_SONIDO, anchor="ne")

# Ocultar el botón de NO SONIDO inicialmente
canvas.itemconfigure(imagen_id_NO_SONIDO, state='hidden')

# Asignar evento click
canvas.tag_bind(imagen_id_SONIDO, "<Button-1>", cambiar_estado_sonido)
canvas.tag_bind(imagen_id_NO_SONIDO, "<Button-1>", cambiar_estado_sonido)



# BOTÓN 1 (PAUSA)

img = Image.open(relative_to_assets("button_1.png")).convert("RGBA")
photo = ImageTk.PhotoImage(img)


imagen_id = canvas.create_image(560.0, 542.0+120, image=photo, anchor="nw")

def accion_pausa(event):
    reproducir_click()
    parar_tiempo()

canvas.tag_bind(imagen_id, "<Button-1>", accion_pausa)



# BOTÓN 2 (AÑADE 5 MINUTOS AL TIEMPO EXISTENTE)

img1 = Image.open(relative_to_assets("button_2.png")).convert("RGBA")
photo1 = ImageTk.PhotoImage(img1)

imagen_id = canvas.create_image(670.0, 546.0+120, image=photo1, anchor="nw")

def accion_boton_5_mas(event):
    reproducir_click()
    añadir_5()

canvas.tag_bind(imagen_id, "<Button-1>", accion_boton_5_mas)

# BOTÓN 3 (RESTA 5 MINUTOS AL TIEMPO EXISTENTE)

img2 = Image.open(relative_to_assets("button_3.png")).convert("RGBA")
photo2 = ImageTk.PhotoImage(img2)

imagen_id = canvas.create_image(230.0, 546.0+120, image=photo2, anchor="nw")

def accion_boton_5_menos(event):
    reproducir_click()
    restar_5()

canvas.tag_bind(imagen_id, "<Button-1>", accion_boton_5_menos)


# BOTÓN 4 (AÑADE 10 MINUTOS AL TIEMPO EXISTENTE)

img3 = Image.open(relative_to_assets("button_4.png")).convert("RGBA")
photo3 = ImageTk.PhotoImage(img3)

imagen_id = canvas.create_image(780.0, 548.0+120, image=photo3, anchor="nw")

def accion_boton_10_mas(event):
    reproducir_click()
    añadir_10()

canvas.tag_bind(imagen_id, "<Button-1>", accion_boton_10_mas)


# BOTÓN 5 (RESTA 10 MINUTOS AL TIEMPO EXISTENTE)

img4 = Image.open(relative_to_assets("button_5.png")).convert("RGBA")
photo4 = ImageTk.PhotoImage(img4)

imagen_id = canvas.create_image(120.0, 548.0+120, image=photo4, anchor="nw")

def accion_boton_10_menos(event):
    reproducir_click()
    restar_10()

canvas.tag_bind(imagen_id, "<Button-1>", accion_boton_10_menos)


# BOTÓN 6 (RESETEA EL CONTADOR A 0)

img5 = Image.open(relative_to_assets("button_6.png")).convert("RGBA")
photo5 = ImageTk.PhotoImage(img5)

imagen_id = canvas.create_image(340.0, 542.0+120, image=photo5, anchor="nw")

def accion_cortar(event):
    reproducir_click()
    cortar_tiempo()

canvas.tag_bind(imagen_id, "<Button-1>", accion_cortar)

# BOTÓN 7 (REANUDA O INICIA EL CONTADOR)

img6 = Image.open(relative_to_assets("button_7.png")).convert("RGBA")
photo6 = ImageTk.PhotoImage(img6)

imagen_id = canvas.create_image(450.00, 542.0+120, image=photo6, anchor="nw")

def accion_play(event):
    reproducir_click()
    iniciar_cuenta_atras()

canvas.tag_bind(imagen_id, "<Button-1>", accion_play)


# CENTRAR LA VENTANA EN LA PANTALLA DEL DISPOSITIVO

ancho_pantalla = window.winfo_screenwidth()
alto_pantalla = window.winfo_screenheight()

ancho_ventana = 1920
alto_ventana = 1080

posicion_X = int(ancho_pantalla / 2 - ancho_ventana / 2) - 8
posicion_Y = int(alto_pantalla / 2 - alto_ventana / 2)

window.geometry(f"{ancho_ventana}x{alto_ventana}+{posicion_X}+{posicion_Y}")

window.tk.call('tk', 'scaling', 10)
window.resizable(False, False)
window.mainloop()
